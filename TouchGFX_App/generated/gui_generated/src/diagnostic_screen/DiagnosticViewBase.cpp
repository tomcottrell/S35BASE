/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/diagnostic_screen/DiagnosticViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DiagnosticViewBase::DiagnosticViewBase()
{
    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box6.setPosition(0, 0, 320, 23);
    box6.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box6);

    test.setXY(-1, 0);
    test.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
    add(test);

    boxWithBorder1.setPosition(9, 90, 304, 119);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(232, 232, 232));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1.setBorderSize(2);
    boxWithBorder1.setAlpha(174);
    add(boxWithBorder1);

    box6_1.setPosition(0, 0, 320, 23);
    box6_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box6_1);

    button1.setXY(80, 216);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
    add(button1);

    button0.setXY(0, 216);
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
    add(button0);

    button2.setXY(160, 216);
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
    add(button2);

    button3.setXY(240, 216);
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
    add(button3);

    HEADER.setXY(113, -1);
    HEADER.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    HEADER.setLinespacing(0);
    HEADER.setWildcard(touchgfx::TypedText(T___SINGLEUSE_75H0).getText());
    HEADER.resizeToCurrentText();
    HEADER.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9KPE));
    add(HEADER);

    HEADER_1.setXY(3, 0);
    HEADER_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    HEADER_1.setLinespacing(0);
    HEADER_1.setWildcard(touchgfx::TypedText(T___SINGLEUSE_L7KG).getText());
    HEADER_1.resizeToCurrentText();
    HEADER_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HA1K));
    add(HEADER_1);

    LATCH.setXY(258, 215);
    LATCH.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    LATCH.setLinespacing(0);
    Unicode::snprintf(LATCHBuffer, LATCH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UB6I).getText());
    LATCH.setWildcard(LATCHBuffer);
    LATCH.resizeToCurrentText();
    LATCH.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NOVX));
    add(LATCH);

    box7.setPosition(8, 114, 303, 2);
    box7.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box7);

    box7_2.setPosition(107, 94, 2, 117);
    box7_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box7_2);

    box7_2_2.setPosition(205, 93, 2, 70);
    box7_2_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box7_2_2);

    param.setXY(12, 90);
    param.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    param.setLinespacing(0);
    param.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IYKH));
    add(param);

    box7_1.setPosition(9, 138, 301, 2);
    box7_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box7_1);

    box7_1_1.setPosition(9, 162, 302, 2);
    box7_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box7_1_1);

    box7_1_1_1.setPosition(9, 184, 301, 2);
    box7_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box7_1_1_1);

    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_EAST_50_50_000000_SVG_ID));
    scalableImage2.setPosition(20, 215, 37, 27);
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(scalableImage2);
}

DiagnosticViewBase::~DiagnosticViewBase()
{

}

void DiagnosticViewBase::setupScreen()
{

}

void DiagnosticViewBase::handleKeyEvent(uint8_t key)
{
    if(0 == key)
    {
        //NEXT_PAGE
        //When hardware button 0 clicked change screen to Diagnostic
        //Go to Diagnostic with no screen transition
        application().gotoDiagnosticScreenNoTransition();
    
    }

    if(3 == key)
    {
        //GOTOMENU
        //When hardware button 3 clicked change screen to PasswordEntry
        //Go to PasswordEntry with no screen transition
        application().gotoPasswordEntryScreenNoTransition();
    
    }
}
